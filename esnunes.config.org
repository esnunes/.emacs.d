#+title: Emacs config
#+author: Eduardo Nunes

* Init
Many of the settings listed below were copied from [[https://github.com/hlissner/doom-emacs][Doom Emacs]].

#+begin_src emacs-lisp
  (defconst IS-MAC     (eq system-type 'darwin))
  (defconst IS-LINUX   (eq system-type 'gnu/linux))
  (defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
  (defconst IS-GUI (memq window-system '(mac ns x)))

  (require 'package)
  (setq package-archives
        '(("elpa" . "https://elpa.gnu.org/packages/")
          ("melpa" . "https://melpa.org/packages/")
          ("org" . "https://orgmode.org/elpa/")))

  ;; keep the installed packages in .emacs.d
  (setq package-user-dir (expand-file-name "elpa" user-emacs-directory))

  (package-initialize)

  ;; update the package metadata is the local cache is missing
  (unless package-archive-contents
    (package-refresh-contents))

  ;; install use-package
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-verbose t)

  ;; Make UTF-8 the default coding system
  (when (fboundp 'set-charset-priority)
    (set-charset-priority 'unicode))
  (prefer-coding-system 'utf-8)
  (setq locale-coding-system 'utf-8)
  (unless IS-WINDOWS
    (setq selection-coding-system 'utf-8))

  ;; Reduce *Message* noise at startup. An empty scratch buffer (or the dashboard)
  ;; is more than enough.
  (setq inhibit-startup-message t
        inhibit-startup-echo-area-message user-login-name
        inhibit-default-init t
        ;; Shave seconds off startup time by starting the scratch buffer in
        ;; `fundamental-mode', rather than, say, `org-mode' or `text-mode', which
        ;; pull in a ton of packages.
        initial-major-mode 'fundamental-mode
        initial-scratch-message nil)

  ;;
  ;;; Optimizations

  ;; Disable bidirectional text rendering for a modest performance boost. I've set
  ;; this to `nil' in the past, but the `bidi-display-reordering's docs say that
  ;; is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; Disabling the BPA makes redisplay faster, but might produce incorrect display
  ;; reordering of bidirectional text with embedded parentheses and other bracket
  ;; characters whose 'paired-bracket' Unicode property is non-nil.
  (setq bidi-inhibit-bpa t)

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  (setq fast-but-imprecise-scrolling t)

  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we halve startup times, particularly when we use
  ;; fonts that are larger than the system default (which would resize the frame).
  (setq frame-inhibit-implied-resize t)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Remove command line options that aren't relevant to our current OS; means
  ;; slightly less to process at startup.
  (unless IS-MAC   (setq command-line-ns-option-alist nil))
  (unless IS-LINUX (setq command-line-x-option-alist nil))

  ;; Adopt a sneaky garbage collection strategy of waiting until idle time to
  ;; collect; staving off the collector while the user is working.
  (setq gcmh-idle-delay 5
        gcmh-high-cons-threshold (* 16 1024 1024)  ; 16mb
        gcmh-verbose nil)

  ;; enable y/n answers
  (fset 'yes-or-no-p 'y-or-n-p)

  (when IS-MAC
    (setq mac-option-modifier 'meta) ;; set Option to Meta
    (setq mac-command-modifier 'super)) ;; set Command to Super

  (when IS-MAC
    (global-set-key (kbd "s-n") 'make-frame-command) ;; open new mac window
    (global-set-key (kbd "s-w") 'delete-frame) ;; close mac window
    (global-set-key (kbd "s-q") 'save-buffers-kill-terminal)) ;; terminate connection

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq create-lockfiles nil)
  ;; uncomment the lines below in case you want to completely disable
  ;; auto-save and auto-backup
  ;; (setq auto-save-default nil)
  ;; (setq make-backup-files nil)
#+end_src

* Core
** Package Manager
#+begin_src emacs-lisp
  ;; bootstrap straight.el
  ;; (defvar bootstrap-version)
  ;; (let ((bootstrap-file
  ;;        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
  ;;       (bootstrap-version 5))
  ;;   (unless (file-exists-p bootstrap-file)
  ;;     (with-current-buffer
  ;; 	(url-retrieve-synchronously
  ;; 	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
  ;; 	 'silent 'inhibit-cookies)
  ;;       (goto-char (point-max))
  ;;       (eval-print-last-sexp)))
  ;;   (load bootstrap-file nil 'nomessage))

  ;; ;; install use-package
  ;; (straight-use-package 'use-package)
  ;; (setq straight-use-package-by-default t)
#+end_src

** Garbage Collector Magic Hack
#+begin_src emacs-lisp
  (use-package gcmh
    :ensure t
    :init
    (gcmh-mode t))
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode t))
#+end_src

** Search
#+begin_src emacs-lisp
  (use-package ripgrep
    :ensure t)
#+end_src

** Key Bindings
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-sort-order #'which-key-prefix-then-key-order
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10)
    (which-key-setup-side-window-bottom)
    (which-key-mode +1))
#+end_src

* Emacs
** dired
#+begin_src emacs-lisp
  (use-package dired
    :init
    (setq dired-auto-revert-buffer t
          dired-recursive-copies 'always
          dired-recursive-deletes 'top))

  (use-package diredfl
    :ensure t
    :hook (dired-mode . diredfl-mode))
#+end_src

** ibuffer
#+begin_src emacs-lisp
  (use-package ibuffer-projectile
    :ensure t
    :hook (ibuffer . ibuffer-projectile-set-filter-groups))  
#+end_src

* Operational System
** MacOSX
#+begin_src emacs-lisp
  ;; Visit files opened outside of Emacs in existing frame, not a new one
  (setq ns-pop-up-frames nil)

  ;; sane trackpad/mouse scroll settings
  (setq mac-redisplay-dont-reset-vscroll t
        mac-mouse-wheel-smooth-scroll nil)

  ;; fix PATH, exec-path
  (use-package exec-path-from-shell
    :ensure t
    :init
    (with-eval-after-load 'exec-path-from-shell
      (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH"))
        (add-to-list 'exec-path-from-shell-variables var)))
    (setq exec-path-from-shell-check-startup-files nil)
    (when (or IS-GUI (daemonp))
      (exec-path-from-shell-initialize)))
#+end_src

* User Interface
** General
#+begin_src emacs-lisp
  ;; remove tool bar
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  
  ;; remove scroll bar
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  
  ;; disable blink cursor
  (blink-cursor-mode -1)
  
  ;; theme
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bold nil)
    (setq doom-themes-enable-italic nil)
    (load-theme 'doom-one t)
    (doom-themes-org-config))
  
  ;; highlight the current line
  (use-package hl-line
    :ensure t
    :hook
    ((prog-mode text-mode conf-mode special-mode) . hl-line-mode)
    :config
    (setq hl-line-sticky-flag nil
          global-hl-line-sticky-flag nil)
    (hl-line-mode t))

  ;; nice scrolling
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)

  ;; disable startup screen
  (setq inhibit-startup-screen t)

  ;; set font
  (if IS-LINUX
      (add-to-list 'default-frame-alist
                   '(font . "DejaVu Sans Mono-18"))
    (add-to-list 'default-frame-alist
                 '(font . "DejaVu Sans Mono-14")))
  (setq-default line-spacing 4)
  ;; (defun en/set-bigger-spacing ()
  ;;   (setq-local default-text-properties '(line-spacing 0.25 line-height 1.25)))
  ;; (add-hook 'text-mode-hook 'en/set-bigger-spacing)
  ;; (add-hook 'prog-mode-hook 'en/set-bigger-spacing)

  ;; add support to emoji
  (set-fontset-font
   t
   '(#x1f300 . #x1fad0)
   (cond
    ((member "Apple Color Emoji" (font-family-list)) "Apple Color Emoji")))

  ;; set default GUI window size
  (add-to-list 'default-frame-alist
               '(width . 130))
  (add-to-list 'default-frame-alist
               '(height . 45))

  ;; set cursor shape
  (setq-default cursor-type 'hbar)
#+end_src

** Modeline
#+begin_src emacs-lisp
  ;; show column number
  (column-number-mode t)

  ;; show buffer size
  (size-indication-mode t)   
#+end_src

** Window Select
#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :init
    (global-set-key [remap other-window] #'ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
          aw-scope 'frame
          aw-background t))
#+end_src

** Quit
#+begin_src emacs-lisp
  ;; quit frame
  (setq confirm-kill-emacs 'y-or-n-p)
  ;; quit buffer
  (setq-default buffer-quit-function
                #'(lambda () (message "Are you trying to quit?")))
#+end_src

** Git Gutter
[[https://github.com/emacsorphanage/git-gutter][git-gutter.el]] is an Emacs port of Sublime Text plugin GitGutter.

#+begin_src emacs-lisp
  (use-package git-gutter
    :ensure t
    :init
    (setq git-gutter:disabled-modes '(fundamental-mode image-mode pdf-view-mode))
    (global-git-gutter-mode t)
    :config
    (setq git-gutter:handled-backends '(git)))
#+end_src

* Version Control
#+begin_src emacs-lisp
  (use-package browse-at-remote
    :ensure t
    :bind ("C-c g g" . browse-at-remote)
    :config
    (setq browse-at-remote-add-line-number-if-no-region-selected nil))
#+end_src

#+begin_src emacs-lisp
  (use-package magit
    :ensure t)
#+end_src

* Completion
** Ivy
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (require 'counsel nil t)
    (setq ivy-sort-max-size 7500
          ivy-height 17
          ivy-wrap t
          ivy-fixed-height-minibuffer t
          projectile-completion-system 'ivy
          ;; disable magic slash on non-match
          ivy-magic-slash-non-match-action nil
          ;; don't show recent files in switch-buffer
          ivy-use-virtual-buffers nil
          ;; ...but if that ever changes, show their full path
          ivy-virtual-abbreviate 'full
          ;; don't quit minibuffer on delete-error
          ivy-on-del-error-function #'ignore
          ;; enable ability to select prompt (alternative to `ivy-immediate-done')
          ivy-use-selectable-prompt t)
    (ivy-mode))

  (use-package counsel
    :ensure t
    :defer t
    :init
    (define-key (current-global-map) [remap apropos] #'counsel-apropos)
    (define-key (current-global-map) [remap bookmark-jump] #'counsel-bookmark)
    (define-key (current-global-map) [remap compile] #'+ivy/compile)
    (define-key (current-global-map) [remap describe-bindings] #'counsel-descbinds)
    (define-key (current-global-map) [remap describe-face] #'counsel-faces)
    (define-key (current-global-map) [remap describe-function] #'counsel-describe-function)
    (define-key (current-global-map) [remap describe-variable] #'counsel-describe-variable)
    (define-key (current-global-map) [remap execute-extended-command] #'counsel-M-x)
    (define-key (current-global-map) [remap find-file] #'counsel-find-file)
    (define-key (current-global-map) [remap find-library] #'counsel-find-library)
    (define-key (current-global-map) [remap imenu] #'counsel-imenu)
    (define-key (current-global-map) [remap info-lookup-symbol] #'counsel-info-lookup-symbol)
    (define-key (current-global-map) [remap load-theme] #'counsel-load-theme)
    (define-key (current-global-map) [remap locate] #'counsel-locate)
    (define-key (current-global-map) [remap org-goto] #'counsel-org-goto)
    (define-key (current-global-map) [remap org-set-tags-command] #'counsel-org-tag)
    (define-key (current-global-map) [remap projectile-compile-project] #'+ivy/project-compile)
    (define-key (current-global-map) [remap recentf-open-files] #'counsel-recentf)
    (define-key (current-global-map) [remap set-variable] #'counsel-set-variable)
    (define-key (current-global-map) [remap swiper] #'counsel-grep-or-swiper)
    (define-key (current-global-map) [remap unicode-chars-list-chars] #'counsel-unicode-char)
    (define-key (current-global-map) [remap yank-pop] #'counsel-yank-pop))

  (use-package swiper
    :ensure t
    :config
    (define-key (current-global-map) [remap isearch-forward] 'swiper))
#+end_src

** Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :defer 2
    :diminish
    :bind
    (:map company-active-map
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)
          ("M-<tab>" . company-complete-common-or-cycle)
          ("<tab>" . company-complete-common-or-cycle))
    :config
    (setq company-idle-delay 0.3)
    (setq company-minimum-prefix-length 2)
    (setq company-tooltip-align-annotations 't)
    (global-company-mode '(not org-mode)))
#+end_src

* Languages
** Org
*** General
#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :init
    (if IS-WINDOWS
        (setq org-directory "/Users/nunes/iCloudDrive/org")
      (setq org-directory "~/iCloud/org"))
    (require 'org-tempo)
    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    :config
    (setq org-export-coding-system 'utf-8
          org-startup-indented t)
    :bind
    ("C-c c" . org-capture)
    ("C-c a" . org-agenda))
#+end_src

*** HTML
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

*** Ledger
#+begin_src emacs-lisp
  ;; force 0 indentation when ledger-mode
  (define-advice org-edit-src-exit (:before (&rest _args))
    "Set org-src-preserve-indentation."
    (if (eq major-mode 'ledger-mode)
        (setq org-edit-src-content-indentation 0)
      (setq org-edit-src-content-indentation 2)))   
#+end_src

*** Get Things Done (GTD)
#+begin_src emacs-lisp
  (setq en/gtd-inbox (expand-file-name "gtd/inbox.org" org-directory))
  (setq en/gtd-gtd (expand-file-name "gtd/gtd.org" org-directory))
  (setq en/gtd-tickler (expand-file-name "gtd/tickler.org" org-directory))
  (setq en/gtd-someday (expand-file-name "gtd/someday.org" org-directory))

  (setq org-agenda-files (list en/gtd-inbox en/gtd-gtd en/gtd-tickler))
  (setq org-refile-targets '((en/gtd-gtd :maxlevel . 3)
                             (en/gtd-someday :level . 1)
                             (en/gtd-tickler :maxlevel . 2)))

  (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                 (file+headline en/gtd-inbox "Tasks")
                                 "* TODO %i%?")
                                ("T" "Tickler" entry
                                 (file+headline en/gtd-tickler "Tickler")
                                 "* %i%? \n %U")))

  (setq org-use-fast-todo-selection t)

  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)
  (setq org-log-state-notes-insert-after-drawers nil)

  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(p)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "tomato1" :weight normal)
                ("NEXT" :foreground "SkyBlue1" :weight normal)
                ("IN-PROGRESS" :foreground "CadetBlue1" :weight normal)
                ("DONE" :foreground "MediumSeaGreen" :weight normal)
                ("WAITING" :foreground "DarkOrange1" :weight normal)
                ("HOLD" :foreground "magenta2" :weight normal)
                ("CANCELLED" :foreground "MediumSeaGreen" :weight normal)
                ("MEETING" :foreground "MediumSeaGreen" :weight normal)
                ("PHONE" :foreground "MediumSeaGreen" :weight normal))))
#+end_src

** C
#+begin_src emacs-lisp
  (defun en-c-setup ()
    (c-set-offset 'arglist-intro '+)
    (c-set-offset 'arglist-close 0)
    (subword-mode 1))
  (add-hook 'c-mode-common-hook 'en-c-setup)
#+end_src
** Markdown
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . gfm-mode))
    :init
    ;; enable auto-fill
    ;; (add-hook 'markdown-mode-hook 'auto-fill-mode)
    :config)
    ;; (set-face-attribute 'markdown-code-face nil :inherit nil)
    ;; (setq markdown-fontify-code-blocks-natively t))
#+end_src

** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode
    :ensure t
    :init
    (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))
#+end_src

** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :config
    (add-hook 'yaml-mode-hook (lambda () (setq tab-width yaml-indent-offset))))
#+end_src

** Ledger
#+begin_src emacs-lisp
  (use-package ledger-mode
    :ensure t)

  (use-package flycheck-ledger
    :ensure t
    :config
    (setq ledger-default-date-format "%Y-%m-%d")
    (add-hook 'ledger-mode-hook 'flycheck-mode))
#+end_src

** Ruby
#+begin_src emacs-lisp
  (use-package ruby-test-mode
    :ensure t
    :config
    (add-hook 'ruby-mode-hook 'ruby-test-mode))
#+end_src

** Swift
#+begin_src emacs-lisp
  (use-package swift-mode
    :ensure t)
#+end_src

** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :custom
    (indent-tabs-mode nil)
    (rust-format-on-save t))
#+end_src

** Odin
#+begin_src emacs-lisp
  (require 'odin-mode)
  (add-to-list 'auto-mode-alist '("\\.odin\\'" . odin-mode))
#+end_src
* Tools
** Shadowenv
[[https://github.com/Shopify/shadowenv][Shadowenv]] provides a way to perform a set of manipulations to the process
environment upon entering a directory in a shell. These manipulations are
reversed when leaving the directory, and there is some limited ability to make
the manipulations dynamic.

#+begin_src emacs-lisp
  (if (executable-find "shadowenv")
      (use-package shadowenv
        :ensure t
        :hook (after-init . shadowenv-global-mode)))
#+end_src

** EditorConfig
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :config
    (editorconfig-mode 1))
#+end_src

** Roam
[[https://github.com/org-roam/org-roam][org-roam]] is a solution for effortless non-hierarchical note-taking
with Org-mode. With Org-roam, notes flow naturally, making note-taking
fun and easy. Org-roam should also work as a plug-and-play solution
for anyone already using Org-mode for their personal wiki.

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :after org
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename (expand-file-name "roam" org-directory)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n j" . org-roam-dailies-capture-today))
    :config
    (unless (file-exists-p org-roam-directory)
      (make-directory org-roam-directory :parents))
    (org-roam-db-autosync-mode)
    (require 'org-roam-protocol))
  ;; :bind (:map org-roam-mode-map
  ;;             (("C-c n l" . org-roam)
  ;;              ("C-c n f" . org-roam-find-file)
  ;;              ("C-c n g" . org-roam-graph-show))
  ;;             :map org-mode-map
  ;;             (("C-c n i" . org-roam-insert))
  ;;             (("C-c n I" . org-roam-insert-immediate))))
#+end_src

